/* generated by rpcoder <%= version %> */

namespace <%= name_space %>
{
	using LitJson.Aiming;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	<%- functions.each do |func| -%>
	<%-
		response_name = func.name.camelize + "Response"
	-%>
	public class <%= response_name %>
	{
		<%- func.return_types.each do |i| -%>
		public <%= i.array_or_type %> <%= i.name.to_s.camelize %>;
		<%- end -%>

		public static <%= response_name %> Parse(string json)
		{
			return Parse(JsonMapper.ToObject(json));
		}

		public static <%= response_name %> Parse(JsonData jsonData)
		{
			<%-
				args = []
				if func.has_return_type?
					args = func.return_types.map {|param|
						if not param.original_type?
							param.name.to_s.camelize + " = jsonData.GetValueOrDefault(\"#{param.name}\").Create(default(#{param.array_or_type}))"
						else
							if param.array?
								param.name.to_s.camelize + " = jsonData.ContainsKey(\"#{param.name}\") ? JsonMapper.ToObject<#{param.array_or_type}>(jsonData[\"#{param.name}\"].ToJson()) : null"
							else
								param.name.to_s.camelize + " = (#{param.array_or_type})jsonData.GetValueOrDefault(\"#{param.name}\")"
							end
						end
					}
				end
			-%>
			return new <%= response_name %>(){<%= args.join(",\n\t\t\t\t\t\t\t") %>};
		}
	}

	<%- end -%>
	public class RpcoderError
	{
		public string ErrorType { get; private set; }
		public string Message { get; private set; }
		public string TargetScene { get; private set; }

		public RpcoderError(string errorType, string message, string targetScene)
		{
			ErrorType = errorType;
			Message = message;
			TargetScene = targetScene;
		}
	}
}
