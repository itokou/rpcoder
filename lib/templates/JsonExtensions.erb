/* generated by rpcoder <%= version %> */
using LitJson.Aiming;
using System;
using System.Collections.Generic;
using System.Linq;

namespace <%= name_space %>
{
	public static partial class JsonExtensions
	{
		public static JsonData ToJsonData(this int item)
		{
			return item;
		}

		public static string ToJson(this int item)
		{
			return item.ToString();
		}

		public static string ToJson(this int? item)
		{
			if (!item.HasValue) return "null";
			return item.ToString();
		}

		public static JsonData ToJsonData(this double item)
		{
			return item;
		}

		public static string ToJson(this double item)
		{
			return item.ToString();
		}

		public static string ToJson(this double? item)
		{
			if (!item.HasValue) return "null";
			return item.ToString();
		}

		public static JsonData ToJsonData(this string item)
		{
			return item;
		}

		public static string ToJson(this string item)
		{
			if (item == null) return "null";
			return "\"" + item + "\"";
		}

		public static JsonData ToJsonData(this bool item)
		{
			return item;
		}

		public static string ToJson(this bool item)
		{
			return item.ToString().ToLower();
		}

		public static string ToJson(this bool? item)
		{
			if (!item.HasValue) return "null";
			return item.ToString().ToLower();
		}

		public static JsonData ToJsonData<T>(this IEnumerable<T> list, Func<T, JsonData> decorator)
		{
			JsonData arrayData = new JsonData();
			var count = list.Count();
			if (count > 0)
			{
				foreach(var i in list)
				{
					if(decorator != null)
					{
						arrayData.Add(decorator(i));
					}
					else
					{
						arrayData.Add(i);
					}
				}
			}
			else
			{
				arrayData.Add(0);
				arrayData.Clear();
			}
			return arrayData;
		}

		public static string ToJson<T>(this IEnumerable<T> list)
		{
			return list.ToJson(x => x.ToString());
		}

		public static string ToJson<T>(this IEnumerable<T> list, Func<T, string> decorator)
		{
			if(list == null) return "";
			return "[" + string.Join(",", list.Select(x => (x != null) ? decorator(x) : "null").ToArray()) + "]";
		}

		<%- enums.each do |enum| -%>
		public static JsonData ToJsonData(this <%= enum.name.to_s.camelize %> item)
		{
			return (int)item;
		}

		public static JsonData ToJsonData(this <%= enum.name.to_s.camelize %>? item)
		{
			return (int?)item;
		}

		public static string ToJson(this <%= enum.name.to_s.camelize %> item)
		{
			return ((int)item).ToJson();
		}

		public static string ToJson(this <%= enum.name.to_s.camelize %>? item)
		{
			return item.HasValue ? item.ToJson() : "null";
		}


		public static JsonData ToJsonData(this IEnumerable<<%= enum.name.to_s.camelize %>> list)
		{
			return list.ToJsonData(x => (int)x);
		}

		public static JsonData ToJsonData(this IEnumerable<<%= enum.name.to_s.camelize %>?> list)
		{
			return list.ToJsonData(x => (int?)x);
		}

		public static string ToJson(this IEnumerable<<%= enum.name.to_s.camelize %>> list)
		{
			return list.ToJson(x => x.ToJson());
		}

		public static string ToJson(this IEnumerable<<%= enum.name.to_s.camelize %>?> list)
		{
			return list.ToJson(x => x.ToJson());
		}

		public static <%= enum.name.to_s.camelize %> Create(this JsonData jsonData, <%= enum.name.to_s.camelize %> dummy)
		{
			if(jsonData == null) return default(<%= enum.name.to_s.camelize %>);
			return (<%= enum.name.to_s.camelize %>)(int)jsonData;
		}

		public static <%= enum.name.to_s.camelize %>? Create(this JsonData jsonData, <%= enum.name.to_s.camelize %>? dummy)
		{
			return (<%= enum.name.to_s.camelize %>?)(int?)jsonData;
		}

		public static List<<%= enum.name.to_s.camelize %>> Create(this JsonData jsonData, List<<%= enum.name.to_s.camelize %>> dummy)
		{
			if(jsonData == null) return null;
			var createdList = new List<<%= enum.name.to_s.camelize %>>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(Create(jsonData[i], default(<%= enum.name.to_s.camelize %>)));
			}

			return createdList;
		}

		public static List<<%= enum.name.to_s.camelize %>?> Create(this JsonData jsonData, List<<%= enum.name.to_s.camelize %>?> dummy)
		{
			if(jsonData == null) return null;
			var createdList = new List<<%= enum.name.to_s.camelize %>?>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(Create(jsonData[i], default(<%= enum.name.to_s.camelize %>?)));
			}

			return createdList;
		}

		<%- end -%>
	}
}
