/* generated by rpcoder <%= version %> */
using LitJson.Aiming;
using System;
using System.Collections.Generic;

namespace <%= name_space %>
{
	<%- enums.each do |enum| -%>
	<%- if enum.description -%>
	/// <summary>
	/// <%= enum.description %>
	/// </summary>
	<%- end -%>
	<%- if enum.flags? -%>
	[Flags]
	<%- end -%>
	public enum <%= enum.name.to_s.camelize %>
	{
		<%- enum.constants.each do |i| -%>
		<%- if i.description -%>
		/// <summary>
		/// <%= i.description %>
		/// </summary>
		<%- end -%>
		<%= i.name.to_s.camelize %> = <%= i.num %>,
		<%- end -%>
	}

	<%- end -%>

	public static partial class JsonExtensions
	{
		<%- enums.each do |enum| -%>
		public static JsonData ToJsonData(this <%= enum.name.to_s.camelize %> item)
		{
			return (int)item;
		}

		public static JsonData ToJsonData(this <%= enum.name.to_s.camelize %>? item)
		{
			return (int?)item;
		}

		public static JsonData ToJsonData(this IEnumerable<<%= enum.name.to_s.camelize %>> list)
		{
			return list.ToJsonData(x => (int)x);
		}

		public static JsonData ToJsonData(this IEnumerable<<%= enum.name.to_s.camelize %>?> list)
		{
			return list.ToJsonData(x => (int?)x);
		}

		public static <%= enum.name.to_s.camelize %> Create(this JsonData jsonData, <%= enum.name.to_s.camelize %> dummy)
		{
			if(jsonData == null) return default(<%= enum.name.to_s.camelize %>);
			return (<%= enum.name.to_s.camelize %>)(int)jsonData;
		}

		public static <%= enum.name.to_s.camelize %>? Create(this JsonData jsonData, <%= enum.name.to_s.camelize %>? dummy)
		{
			return (<%= enum.name.to_s.camelize %>?)(int?)jsonData;
		}

		public static List<<%= enum.name.to_s.camelize %>> Create(this JsonData jsonData, List<<%= enum.name.to_s.camelize %>> dummy)
		{
			if(jsonData == null) return null;
			var createdList = new List<<%= enum.name.to_s.camelize %>>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(Create(jsonData[i], default(<%= enum.name.to_s.camelize %>)));
			}

			return createdList;
		}

		public static List<<%= enum.name.to_s.camelize %>?> Create(this JsonData jsonData, List<<%= enum.name.to_s.camelize %>?> dummy)
		{
			if(jsonData == null) return null;
			var createdList = new List<<%= enum.name.to_s.camelize %>?>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(Create(jsonData[i], default(<%= enum.name.to_s.camelize %>?)));
			}

			return createdList;
		}

		<%- end -%>
	}
}
