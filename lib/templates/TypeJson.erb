/* generated by rpcoder <%= version %> */

namespace <%= name_space %>
{
	using System.Collections.Generic;
	using System.Linq;
	using LitJson.Aiming;

	public partial class <%= type.name %>
	{
		public override string ToString()
		{
			var items = new[]
			{
				<%- type.fields.each do |x| -%>
				"\"<%= x.name.to_s %>\":" +
				<%- if x.array? then -%>
					<%- if x.optional? -%>
					((<%= x.name.to_s.camelize %> != null) ? "[" + string.Join(",", <%= x.name.to_s.camelize %>.Select(i => i.ToJson()).ToArray()) + "]" : "null"),
					<%- else -%>
					"[" + string.Join(",", <%= x.name.to_s.camelize %>.Select(i => i.ToJson()).ToArray()) + "]",
					<%- end -%>
				<%- elsif x.optional? -%>
					((<%= x.name.to_s.camelize %> != null) ? <%= x.name.to_s.camelize %>.ToJson() : "null"),
				<%- else -%>
					<%= x.name.to_s.camelize %>.ToJson(),
				<%- end -%>
				<%- end -%>
			};

			return "{" + string.Join(",", items) + "}";
		}

		public static <%= type.name %> Parse(string json)
		{
			return JsonMapper.ToObject(json).Create(default(<%= type.name %>));
		}

		public static <%= type.array %> ParseList(string json)
		{
			return JsonMapper.ToObject(json).Create(default(<%= type.array %>));
		}
	}

	public static partial class JsonExtensions
	{
		public static string ToJson(this <%= type.name %> item)
		{
			return (item != null) ?  item.ToString() : "null";
		}

		public static JsonData ToJsonData(this <%= type.name %> item)
		{
			return JsonMapper.ToObject(item.ToString());
		}

		public static JsonData ToJsonData(this IEnumerable<<%= type.name %>> list)
		{
			return list.ToJsonData(x => x.ToJsonData());
		}

		public static <%= type.name %> Create(this JsonData jsonData, <%= type.name %> dummy)
		{
			if(jsonData == null) return null;
			<%= type.name %> createdData = new <%= type.name %>();
			
			<%- type.fields.each do |field| -%>
			{
				JsonData temp;
				if(jsonData.TryGetValue("<%= field.name.to_s %>", out temp))
				{
				<%- if field.original_type? -%>
					<%- if field.array? -%>
					if(temp != null)
						createdData.<%= field.name.to_s.camelize %> = JsonMapper.ToObject<<%= field.array_or_type %>>(temp.ToJson());
					<%- else -%>
						<%- if field.double? -%>
					if(temp != null && temp.<%= field.to_json_type? %>)
					{
						createdData.<%= field.name.to_s.camelize %> = (<%= field.array_or_type %>)temp;
					}
					else
					{
						createdData.<%= field.name.to_s.camelize %> = <%- if field.optional? -%>(int?)<%- else -%>(int)<%- end -%>temp;
					}
						<%- else -%>
					createdData.<%= field.name.to_s.camelize %> = (<%= field.array_or_type %>)temp;
						<%- end -%>
					<%- end -%>
				<%- else -%>
					<%- if field.array? -%>
					createdData.<%= field.name.to_s.camelize %> = temp.Create(default(<%= field.array_or_type %>));
					<%- else -%>
					createdData.<%= field.name.to_s.camelize %> = temp.Create(default(<%= field.array_or_type %>));
					<%- end -%>
				<%- end -%>
				}
				<%- if field.optional? -%>
				else
					createdData.<%= field.name.to_s.camelize %> = null;
				<%- end -%>
			}

			<%- end -%>

			return createdData;
		}

		public static <%= type.array %> Create(this JsonData jsonData, <%= type.array %> dummy)
		{
			if(jsonData == null) return null;
			<%- if type.array_type == :array -%>
			var count = jsonData.Count;
			var createdList = new <%= type.name %>[count];
			for(int i = 0; i < count; ++i)
			{
				createdList[i] = jsonData[i].Create(default(<%= type.name %>));
			}
			<%- else -%>
			var createdList = new List<<%= type.name %>>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(jsonData[i].Create(default(<%= type.name %>)));
			}
			<%- end -%>

			return createdList;
		}
	}
}
