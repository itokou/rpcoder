/* generated by rpcoder */
using UnityEngine;
using LitJson;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace <%= name_space %>
{
	public class <%= api_class_name %> : <%= api_class_name %>Interface
	{
		public const string RESTART		= "RESTART";
		public const string RETENTION	= "RETENTION";
		public const string TRANSITION	= "TRANSITION";
		public const string RELOAD		= "RELOAD";
		
		public string BaseUrl { get; set; }
		public RpcoderLogger Logger { get; set; } 
		private void Log(string log)
		{
			if(Logger != null) Logger(log);
		}

		public event Action<JsonData> Responded;
		private void RaiseResponded(JsonData jsonData)
		{
			var d = Responded;
			if (d != null) d(jsonData);
		}

		public Func<string, string> CustomValidator;
		private string Validate(string source)
		{
			var d = CustomValidator;
			if(d != null)
			{
				return CustomValidator(source);
			}
			else
			{
				return source;
			}
		}

		private Dictionary<string, string> commonParameterList = new Dictionary<string, string>();

		public void AddCommonParameter(string key, string value)
		{
			commonParameterList[key] = value;
		}

		public string RemoveCommonParameter(string key)
		{
			string returnValue = "";
			if (commonParameterList.ContainsKey(key))
			{
				returnValue = commonParameterList[key];
				commonParameterList.Remove(key);
			}
			return returnValue;
		}

		public string DefaultErrorMessage { get; set; }
		public RpcoderErrorHandler ErrorHandler { get; set; }
		
		public <%= api_class_name %>(string baseUrl)
		{
			BaseUrl = baseUrl;
			DefaultErrorMessage = "";
			JsonMapper.RegisterImporter<int, double?>((i) => (double?)i);
			JsonMapper.RegisterImporter<int, double>((i) => (double)i);
		}

		private string AddQueryDelimiter(string source)
		{
			if(source == "")
			{
				source += "?";
			}
			else
			{
				source += "&";
			}
			return source;
		}

		<%- functions.each do |func| -%>
		<%-
			response = func.name.camelize + "Response"
			successHandler = "Action<" + response + ">"
			params_excluded_error_handler = func.params.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') } + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		/// <summary>
		/// <%= func.description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.camelize(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		public IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>)
		{
			return this.<%= func.name.camelize %>(<%= (func.params.map{|i| i.name.to_s.camelize(false) } + ['success']).join(', ') %>, null);
		}

		/// <summary>
		/// <%= func.description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.camelize(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>)
		{
			string path = <%= func.path_parts.join(' + ') %>;
			<%- if func.is_get? -%>
			string argsPath = "";
			<%- if func.has_query_params? -%>
			Dictionary<string, System.Object> args = new Dictionary<string, System.Object>();
			<%- func.query_params.each do |i| -%>
			<%- if i.optional? -%>
			if (<%= i.name.to_s.camelize(false) %> != null)
			<%- end -%>
			{
				<%- if i.array? -%>
				JsonData arrayData = new JsonData();
				for (int i = 0; i < <%= i.name.to_s.camelize(false) %>.Count; ++i)
				{
					arrayData.Add(<%= i.name.to_s.camelize(false) %>[i]);
				}
				args["<%= i.name.to_s %>"] = arrayData.ToJson();
				<%- else -%>
				args["<%= i.name.to_s %>"] = <%= i.name.to_s.camelize(false) %>;
				<%- end -%>
			}
			<%- end -%>
			foreach(string key in args.Keys)
			{
				argsPath = AddQueryDelimiter(argsPath);
				argsPath += WWW.EscapeURL(key) + "=" +  WWW.EscapeURL(args[key].ToString());
			}
			<%- end -%>
			
			foreach(string key in commonParameterList.Keys)
			{
				argsPath = AddQueryDelimiter(argsPath);
				argsPath += WWW.EscapeURL(key) + "=" + WWW.EscapeURL(commonParameterList[key]);
			}
			string fullPath = this.BaseUrl + path + argsPath;
			Log("request " + fullPath);
			WWW www = new WWW(fullPath);
			<%- else -%>
			JsonData data = new JsonData();
			
			<%- if func.has_query_params? -%>
			<%- func.query_params.each do |i| -%>
			<%- if i.optional? -%>
			if (<%= i.name.to_s.camelize(false) %> != null)
			<%- end -%>
			{
				<%- if i.array? -%>
				JsonData arrayData = new JsonData();
				var count = <%= i.name.to_s.camelize(false) %>.Count;
				if(count > 0)
				{
					for (int i = 0; i < count; ++i)
					{
						arrayData.Add(<%= i.name.to_s.camelize(false) %>[i]);
					}
				}
				else
				{
					arrayData.Add(0);
					arrayData.Clear();
				}
				data["<%= i.name.to_s %>"] = arrayData;
				<%- else -%>
				data["<%= i.name.to_s %>"] = <%= i.name.to_s.camelize(false) %>;
				<%- end -%>
			}
			<%- end -%>
			<%- end -%>

			foreach(string key in commonParameterList.Keys)
			{
				data[key] = commonParameterList[key];
			}
			
			var json = data.ToJson();
			byte[] byteArray = Encoding.UTF8.GetBytes(json == String.Empty ? " " : json);
			Log("request " + this.BaseUrl + path + " " + data.ToJson());
			
			WWW www = new WWW(this.BaseUrl + path, byteArray);
			<%- end -%>
			yield return www;

			if(error == null)
			{
				error = ErrorHandler;
			}

			if(www.error != null)
			{
				error(RETENTION, DefaultErrorMessage + (Debug.isDebugBuild ? "\n" + this.BaseUrl + path + " " + data.ToJson() + "\n" + www.error : ""), null);
			}
			else
			{
				Log("<%= func.name.camelize %> responded " + www.text);
				try
				{
					var text = Validate(www.text);
					JsonData jsonData = JsonMapper.ToObject(text);
					<%= api_class_name %>.HandleDebugMessage(jsonData, Log);
					try
					{
						<%= api_class_name %>.HandleError(jsonData, error);
					}
					catch(KeyNotFoundException)
					{
						try
						{
							<%-
								args = []
								if func.has_return_type?
									args = func.return_types.map {|param|
										if param.array?
											if param.original_type?
												param.name.to_s.camelize + " = jsonData.ContainsKey(\"#{param.name}\") ? JsonMapper.ToObject<#{param.array_or_type}>(jsonData[\"#{param.name}\"].ToJson()) : null"
											else
												param.name.to_s.camelize + " = #{param.type}.CreateList(jsonData.GetValueOrDefault(\"#{param.name}\"))"
											end
										else
											if param.original_type?
												param.name.to_s.camelize + " = (#{param.array_or_type})jsonData.GetValueOrDefault(\"#{param.name}\")"
											else
												param.name.to_s.camelize + " = #{param.type}.Create(jsonData.GetValueOrDefault(\"#{param.name}\"))"
											end
										end
									}
								end
							-%>
							success(new <%= response %>(){<%= args.join(",\n\t\t\t\t\t\t\t") %>});
							RaiseResponded(jsonData);
						}
						catch(KeyNotFoundException)
						{
							error(RESTART, "Json parse Error", null);
						}
					}
				}
				catch(JsonException)
				{
					error(RESTART, "Json parse Error\n" + www.text, null);
				}
			}
		}
		
		<%- end -%>

		public static void HandleError(JsonData jsonData, RpcoderErrorHandler error)
		{
			JsonData errorJsonData = jsonData["rpcoderError"];
			string errorType = (string)errorJsonData["errorType"];
			string message = "";
			JsonData messageJson;
			if(errorJsonData.TryGetValue("message", out messageJson))
			{
				message = (string)messageJson;
			}
			JsonData targetSceneJson;
			string targetScene = null;
			if(errorJsonData.TryGetValue("targetScene", out targetSceneJson))
			{
				targetScene = (string)targetSceneJson;
			}
			error(errorType, message, targetScene);
		}

		public static void HandleDebugMessage(JsonData jsonData, Action<string> logger)
		{
			JsonData message;
			if(jsonData.TryGetValue("debugMessage", out message))
			{
				logger((string)message);
			}
		}
	}
}
