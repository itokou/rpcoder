/* generated by rpcoder */
using System;
using System.Collections;
using System.Collections.Generic;

namespace <%= name_space %>
{
	public class <%= api_class_name %>DummyServer : <%= api_class_name %>Interface
	{
		public <%= api_class_name %>DummyServer(<%= api_class_name %>Interface api)
		{
			_api = api;
		}

		private <%= api_class_name %>Interface _api;

		public RpcoderErrorHandler ErrorHandler
		{
			get
			{
				return _api.ErrorHandler;
			}
			set
			{
				_api.ErrorHandler = value;
			}
		}

		public string BaseUrl
		{
			get
			{
				return _api.BaseUrl;
			}
			set
			{
				_api.BaseUrl = value;
			}
		}

		public RpcoderLogger Logger
		{
			get
			{
				return _api.Logger;
			}
			set
			{
				_api.Logger = value;
			}
		}

		public void AddCommonParameter(string key, string value)
		{
			_api.AddCommonParameter(key, value);
		}

		public string RemoveCommonParameter(string key)
		{
			return _api.RemoveCommonParameter(key);
		}

		<%- functions.each do |func| -%>
		<%-
			response = func.name.camelize + "Response"
			successHandler = "Action<" + response + ">"
			request_query = func.params.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') }
			params_excluded_error_handler = request_query + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		public class <%= func.name.camelize %>Request
		{
			<%- func.params.each do |i| -%>
			public <%= i.array_or_type %> <%= i.name.to_s.camelize %>;
			<%- end -%>
			public <%= successHandler %> Success;
			public RpcoderErrorHandler Error;
		}

		public Func<<%= func.name.camelize %>Request, IEnumerator> <%= func.name.camelize %>Logic { get; set; }

		public IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>)
		{
			return this.<%= func.name.camelize %>(<%= (func.params.map{|i| i.name.to_s.camelize(false) } + ['success']).join(', ') %>, null);
		}

		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>)
		{
			if(<%= func.name.camelize %>Logic != null)
			{
				return <%= func.name.camelize %>Logic(new <%= func.name.camelize %>Request(){
				<%- func.params.each do |i| -%>
					<%= i.name.to_s.camelize %> = <%= i.name.to_s.camelize(false) %>,
				<%- end -%>
					Success = success,
					Error = (error != null) ? error : ErrorHandler
					});
			}
			else
			{
				return _api.<%= func.name.camelize %>(
				<%- func.params.each do |i| -%>
					<%= i.name.to_s.camelize(false) %>,
				<%- end -%>
					success,
					(error != null) ? error : ErrorHandler
					);
			}
		}

		<%- end -%>
	}
}
