/* generated by rpcoder <%= version %> */

namespace <%= name_space %>
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using Aiming.IteratorTasks;

	public delegate void RpcoderLogger(string log);
	public delegate void RpcoderErrorHandler(string errorType, string message, string targetScene);

	public interface <%= api_class_name %>Interface
	{
		string BaseUrl { get; set; }
		RpcoderLogger Logger { get; set; }
		void AddCommonParameter(string key, string value);
		string RemoveCommonParameter(string key);
		RpcoderErrorHandler ErrorHandler{ get; set; }

		<%- functions.each do |func| -%>
		<%-
			successHandler = "Action<" + func.name.camelize + "Response>"
			params_excluded_error_handler = func.params.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') } + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		/// <summary>
		/// <%= func.description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.camelize(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>);

		/// <summary>
		/// <%= func.description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.camelize(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>, Action throwIfCancelRequested, Action<float> reportProgress);

		<%- end -%>
	}
}
